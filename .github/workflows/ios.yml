name: Build and Test
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
jobs:
  build:
    strategy:
      matrix:
        device: [
          'iPhone X',
          'iPhone XS',
          'iPhone XS Max',
          'iPhone XR',
          'iPhone 11',
          'iPhone 11 Pro',
          'iPhone 11 Pro Max',
          'iPhone 12',
          'iPhone 12 Pro',
          'iPhone 12 Pro Max',
          'iPhone 12 mini',
          'iPhone 13',
          'iPhone 13 Pro',
          'iPhone 13 Pro Max',
          'iPhone 13 mini',
          'iPhone 14',
          'iPhone 14 Plus',
          'iPhone 14 Pro',
          'iPhone 14 Pro Max',
          'iPhone 15',
          'iPhone 15 Plus',
          'iPhone 15 Pro',
          'iPhone 15 Pro Max',
          'iPhone 16',
          'iPhone 16 Plus',
          'iPhone 16 Pro',
          'iPhone 16 Pro Max'
        ]
      fail-fast: false # Continue running other devices if one fails
    name: Build and Test on ${{ matrix.device }}
    runs-on: macos-15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
          device: ${{ matrix.device }}
        run: |
          # Check if simulator exists
          if ! xcrun simctl list devices available | grep -q "$device"; then
            echo "Simulator $device not available, skipping..."
            exit 0
          fi
          
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
          device: ${{ matrix.device }}
        run: |
          # Check if simulator exists
          if ! xcrun simctl list devices available | grep -q "$device"; then
            echo "Simulator $device not available, skipping..."
            exit 0
          fi
          
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"