name: Build and Test
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-test:
    runs-on: macos-15
    strategy:
      fail-fast: false
      matrix:
        device: ["iPhone X", "iPhone 11", "iPhone 12", "iPhone 13", "iPhone 14", "iPhone 15", "iPhone 16"]
        os: ["18.0"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: List Available Simulators
        run: xcrun simctl list devices

      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default

      - name: Build
        run: |
          device=$(xcrun simctl list devices available | grep -oE "${{ matrix.device }}.*OS:${{ matrix.os }}" | head -1 | awk '{$1=$1;print}')
          if [ -z "$device" ]; then
            echo "❌ No suitable device found for ${{ matrix.device }} with OS ${{ matrix.os }}!"
            exit 1
          fi
          echo "Building for device: $device"
          xcodebuild build-for-testing -scheme "$(cat default)" -project "$(ls -A | grep -i \\.xcodeproj\$)" -destination "platform=iOS Simulator,name=${{ matrix.device }},OS=${{ matrix.os }}"

      - name: Test
        run: |
          device=$(xcrun simctl list devices available | grep -oE "${{ matrix.device }}.*OS:${{ matrix.os }}" | head -1 | awk '{$1=$1;print}')
          if [ -z "$device" ]; then
            echo "❌ No suitable device found for ${{ matrix.device }} with OS ${{ matrix.os }}!"
            exit 1
          fi
          echo "Testing on device: $device"
          xcodebuild test-without-building -scheme "$(cat default)" -project "$(ls -A | grep -i \\.xcodeproj\$)" -destination "platform=iOS Simulator,name=${{ matrix.device }},OS=${{ matrix.os }}"
